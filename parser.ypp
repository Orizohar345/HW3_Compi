%{
    #include <iostream>
    #include <stdlib.h>
    #include <string>
    #include "hw3_output.hpp"
    #include "tables_stack.h"
    #include "types.h"
    #include <stack>

    using namespace std;
    TablesStack table_stack;
    extern int yylineno;
    extern int yylex();
    int yyerror(const char* message);

%}

%token TRUE FALSE RETURN IF WHILE BREAK CONTINUE SC LPAREN RPAREN LBRACE RBRACE INT BYTE B BOOL STRING ID NUM

%right ASSIGN
%left OR
%left AND
%left RELOP_EQ
%left RELOP_REL
%left BINOP_ADD
%left BINOP_MULT
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE

%%

Program : Statements { table_stack.removeTopTable(); }
        ;

Statements : Statement {}
           | Statements Statement {}
           ;

Statement : LBRACE { table_stack.addNewTable(); } Statements RBRACE { table_stack.removeTopTable(); }
          | Type ID SC {
                if (table_stack.entryExists($2->text)) {
                    output::errorDef(yylineno, $2->text);
                    exit(1);
                }

                table_stack.addToTopTable(Entry($2->text, $1->text));
            }
          | Type ID ASSIGN Exp SC {
                Exp* exp = dynamic_cast<Exp*>($3);
                if (!exp->is_const && !table_stack.entryExists(exp->text)) {
                    printf("1");
                    output::errorUndef(yylineno, exp->text);
                    exit(1);
                }

                if (table_stack.entryExists($2->text)) {
                    output::errorDef(yylineno, $2->text);
                    exit(1);
                }

                if ($1->text != exp->type && ($1->text != "INT" && exp->type != "BYTE")) {
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                table_stack.addToTopTable(Entry($2->text, $1->text));
            }
          | ID ASSIGN Exp SC {
                Exp* exp = dynamic_cast<Exp*>($3);
                if ((!exp->is_const && !table_stack.entryExists(exp->text)) || table_stack.entryExists(exp->text)) {
                    output::errorUndef(yylineno, exp->text);
                    exit(1);
                }
                Entry *entry;
                if (table_stack.entryExists($1->text)) {
                    entry = table_stack.getEntry($1->text);
                } else {
                    output::errorDef(yylineno, $1->text);
                    exit(1);
                }

                if (entry->type != exp->type && ($1->text != "INT" && exp->type != "BYTE")) {
                    output::errorMismatch(yylineno);
                    exit(1);
                }
            }
          | Call SC {}
          | RETURN SC {}
          | IF LPAREN M1 RPAREN Statement M2
          | IF LPAREN M1 RPAREN Statement M2 ELSE { table_stack.addNewTable(); } Statement { table_stack.removeTopTable(); }
          | WHILE LPAREN Exp RPAREN {
                Exp* exp = dynamic_cast<Exp*>($3);
                if ((!exp->is_const && !table_stack.entryExists(exp->text)) || table_stack.entryExists(exp->text)) {
                    output::errorUndef(yylineno, exp->text);
                    exit(1);
                }

                if (exp->type != "BOOL") {
                    output::errorMismatch(yylineno);
                }

                table_stack.addNewTable();
                table_stack.addToTopTable(Entry("WHILE", "WHILE"), true);
            } Statement { table_stack.removeTopTable(); }
          | BREAK SC { if (!table_stack.entryExists("WHILE")) { output::errorUnexpectedBreak(yylineno); exit(1); } }
          | CONTINUE SC { if (!table_stack.entryExists("WHILE")) { output::errorUnexpectedContinue(yylineno); exit(1); } }
          ;

Call : ID LPAREN Exp RPAREN {
            Exp* exp = dynamic_cast<Exp*>($3);
            if (!exp->is_const && !table_stack.entryExists(exp->text)) {
                output::errorUndef(yylineno, exp->text);
                exit(1);
            }
            std::string type = verifyFunc($1->text, exp->type, yylineno);
            $$ = new Call("", type, 0, true);
        }
     ;
Type : INT { $$ = new Type("INT");}
     | BOOL { $$ = new Type("BOOL"); }
     | BYTE { $$ = new Type("BYTE"); }
     ;

Exp : LPAREN Exp RPAREN {
            Exp* exp = dynamic_cast<Exp*>($2);
            if (!exp->is_const && !table_stack.entryExists(exp->text)) {
                output::errorUndef(yylineno, exp->text);
                exit(1);
            }
            $$ = new Exp(exp->text, exp->type, exp->val, exp->is_const);
        }
    | Exp BINOP_MULT Exp {
            Exp* exp1 = dynamic_cast<Exp*>($1);
            Exp* exp2 = dynamic_cast<Exp*>($3);
            if (!exp1->is_const && !table_stack.entryExists(exp1->text)) {
                output::errorUndef(yylineno, exp1->text);
                exit(1);
            }
            if (!exp2->is_const && !table_stack.entryExists(exp2->text)) {
                output::errorUndef(yylineno, exp2->text);
                exit(1);
            }
            std::string type = verifyBinop(exp1->type, exp2->type, yylineno);
            int val = verifyByte(exp1->type, exp2->type, exp1->val, exp2->val, "MULT", yylineno)
            $$ = new Exp("", type, val, true);
        }
    | Exp BINOP_ADD Exp {
            Exp* exp1 = dynamic_cast<Exp*>($1);
            Exp* exp2 = dynamic_cast<Exp*>($3);
            if (!exp1->is_const && !table_stack.entryExists(exp1->text)) {
                output::errorUndef(yylineno, exp1->text);
                exit(1);
            }
            if (!exp2->is_const && !table_stack.entryExists(exp2->text)) {
                output::errorUndef(yylineno, exp2->text);
                exit(1);
            }
            std::string type = verifyBinop(exp1->type, exp2->type, yylineno);
            int val = verifyByte(exp1->type, exp2->type, exp1->val, exp2->val, "ADD", yylineno)
            $$ = new Exp("", type, val, true);
        }
    | ID {$$ = new Exp($1->text, "", 0, false);}
    | Call {
         Call* call = dynamic_cast<Call*>($1);
         $$ = new Exp(call->text, call->type, call->val, call->is_const);
         }
    | NUM { $$ = new Exp($1->text, "INT", std::stoi($1->text), true); }
    | NUM B {
         $$ = new Exp($1->text, "BYTE", std::stoi($1->text), true);
         if (dynamic_cast<Exp*>($$)->val > 255) {
            output::errorByteTooLarge(yylineno, dynamic_cast<Exp*>($$)->val);
            exit(1);
            }
        }
    | STRING { $$ = new Exp($1->text, "STRING", 0, true); }
    | TRUE { $$ = new Exp($1->text, "BOOL", 1, true); }
    | FALSE { $$ = new Exp($1->text, "BOOL", 0, true); }
    | NOT Exp {
            Exp* exp = dynamic_cast<Exp*>($2);
            if (!exp->is_const && !table_stack.entryExists(exp->text)) {
                output::errorUndef(yylineno, exp->text);
                exit(1);
            }
            if (exp->type != "BOOL") {
                output::errorMismatch(yylineno);
                exit(1);
            }
            $$ = new Exp("", "BOOL", ~exp->val, true);
        }
    | Exp AND Exp {
            Exp* exp1 = dynamic_cast<Exp*>($1);
            Exp* exp2 = dynamic_cast<Exp*>($3);
            if (!exp1->is_const && !table_stack.entryExists(exp1->text)) {
                output::errorUndef(yylineno, exp1->text);
                exit(1);
            }
            if (!exp2->is_const && !table_stack.entryExists(exp2->text)) {
                output::errorUndef(yylineno, exp2->text);
                exit(1);
            }

            if (exp1->type != "BOOL") {
                output::errorMismatch(yylineno);
                exit(1);
            }
            if (exp2->type != "BOOL") {
                output::errorMismatch(yylineno);
                exit(1);
            }
            $$ = new Exp("", "BOOL", exp1->val & exp2->val, true);
        }
    | Exp OR Exp {
            Exp* exp1 = dynamic_cast<Exp*>($1);
            Exp* exp2 = dynamic_cast<Exp*>($3);
            if (!exp1->is_const && !table_stack.entryExists(exp1->text)) {
                output::errorUndef(yylineno, exp1->text);
                exit(1);
            }
            if (!exp2->is_const && !table_stack.entryExists(exp2->text)) {
                output::errorUndef(yylineno, exp2->text);
                exit(1);
            }

            if (exp1->type != "BOOL") {
                output::errorMismatch(yylineno);
                exit(1);
            }
            if (exp2->type != "BOOL") {
                output::errorMismatch(yylineno);
                exit(1);
            }
            $$ = new Exp("", "BOOL", exp1->val | exp2->val, true);
        }
    | Exp RELOP_EQ Exp {
            Exp* exp1 = dynamic_cast<Exp*>($1);
            Exp* exp2 = dynamic_cast<Exp*>($3);
            if (!exp1->is_const && !table_stack.entryExists(exp1->text)) {
                output::errorUndef(yylineno, exp1->text);
                exit(1);
            }
            if (!exp2->is_const && !table_stack.entryExists(exp2->text)) {
                output::errorUndef(yylineno, exp2->text);
                exit(1);
            }

            verifyNumeric(exp->type, exp2->type, yylineno);
            $$ = new Exp("", "BOOL", 0, true);
        }
    | Exp RELOP_REL Exp {
            Exp* exp1 = dynamic_cast<Exp*>($1);
            Exp* exp2 = dynamic_cast<Exp*>($3);
            if (!exp1->is_const && !table_stack.entryExists(exp1->text)) {
                output::errorUndef(yylineno, exp1->text);
                exit(1);
            }
            if (!exp2->is_const && !table_stack.entryExists(exp2->text)) {
                output::errorUndef(yylineno, exp2->text);
                exit(1);
            }

            verifyNumeric(exp->type, exp2->type, yylineno);
            $$ = new Exp("", "BOOL", 0, true);
        }
    | LPAREN Type RPAREN Exp {
            Exp* exp = dynamic_cast<Exp*>($4);
            if (!exp->is_const && !table_stack.entryExists(exp->text)) {
                output::errorUndef(yylineno, exp->text);
                exit(1);
            }
            verifyNumeric($2->text, exp->type, yylineno);
            if ($2->text == "BYTE" && exp->val > 255) {
                output::errorByteTooLarge(yylineno, exp->val);
                exit(1);
            }
            $$ = new Exp("", exp->type, exp->val, true);
        }
    ;

M1 : Exp    {
                    Exp* exp = dynamic_cast<Exp*>($1);
                    if ((!exp->is_const && !table_stack.entryExists(exp->text)) || table_stack.entryExists(exp->text)) {
                        output::errorUndef(yylineno, exp->text);
                        exit(1);
                    }
                    if (exp->type != "BOOL") {
                        output::errorMismatch(yylineno);
                    }
                    table_stack.addNewTable();
                    $$ = new Exp(exp->text, exp->type, exp->val, exp->is_const);
            }
   ;

M2 : { table_stack.removeTopTable(); }
   ;

%%

int main()
{
    yyparse();
}

int yyerror(const char* message)
{
    output::errorSyn(yylineno);
    exit(0);
}
